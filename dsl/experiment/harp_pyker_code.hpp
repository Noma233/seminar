#include<math.h>
;
int kernel(int n, double ri[][3], double vi[][3], double rj[][3], double vj[][3], double mj[], double eps2[], double F[][3], double J[][3]){
   int i;
   int j;
   double dr_v0;
   double dr_v1;
   double dr_v2;
   double dv_v0;
   double dv_v1;
   double dv_v2;
   double r2_v0;
   double r2_v1;
   double r2_v2;
   double rv_v0;
   double rv_v1;
   double rv_v2;
   double x0_v0;
   double x0_v1;
   double x0_v2;
   double af_v0;
   double af_v1;
   double af_v2;
   double jf_v0;
   double jf_v1;
   double jf_v2;
   for (i = 0; i < n; i += 1) {
      ;
      ;
      for (j = 0; j < n; j += 1) {
         ;
         dr_v0 = ri[i][0] - rj[j][0];
         dr_v1 = ri[i][1] - rj[j][1];
         dr_v2 = ri[i][2] - rj[j][2];
         dv_v0 = vi[i][0] - vj[j][0];
         dv_v1 = vi[i][1] - vj[j][1];
         dv_v2 = vi[i][2] - vj[j][2];
         r2_v0 = eps2[j] + (dr_v2*dr_v2 + (dr_v0*dr_v0 + dr_v1*dr_v1));
         r2_v1 = eps2[j] + (dr_v2*dr_v2 + (dr_v0*dr_v0 + dr_v1*dr_v1));
         r2_v2 = eps2[j] + (dr_v2*dr_v2 + (dr_v0*dr_v0 + dr_v1*dr_v1));
         rv_v0 = dr_v2*dv_v2 + (dr_v0*dv_v0 + dr_v1*dv_v1);
         rv_v1 = dr_v2*dv_v2 + (dr_v0*dv_v0 + dr_v1*dv_v1);
         rv_v2 = dr_v2*dv_v2 + (dr_v0*dv_v0 + dr_v1*dv_v1);
         x0_v0 = sqrt(r2_v0);
         x0_v1 = sqrt(r2_v1);
         x0_v2 = sqrt(r2_v2);
         af_v0 = mj[j]*(x0_v0*(x0_v0*x0_v0));
         af_v1 = mj[j]*(x0_v1*(x0_v1*x0_v1));
         af_v2 = mj[j]*(x0_v2*(x0_v2*x0_v2));
         jf_v0 = (3.0*mj[j])*(rv_v2*x0_v2 + (rv_v0*x0_v0 + rv_v1*x0_v1));
         jf_v1 = (3.0*mj[j])*(rv_v2*x0_v2 + (rv_v0*x0_v0 + rv_v1*x0_v1));
         jf_v2 = (3.0*mj[j])*(rv_v2*x0_v2 + (rv_v0*x0_v0 + rv_v1*x0_v1));
         F[i][0] += af_v2*dr_v2 + (af_v0*dr_v0 + af_v1*dr_v1);
         F[i][1] += af_v2*dr_v2 + (af_v0*dr_v0 + af_v1*dr_v1);
         F[i][2] += af_v2*dr_v2 + (af_v0*dr_v0 + af_v1*dr_v1);
         J[i][0] += (af_v2*dv_v2 + (af_v0*dv_v0 + af_v1*dv_v1)) - (dr_v2*jf_v2 + (dr_v0*jf_v0 + dr_v1*jf_v1));
         J[i][1] += (af_v2*dv_v2 + (af_v0*dv_v0 + af_v1*dv_v1)) - (dr_v2*jf_v2 + (dr_v0*jf_v0 + dr_v1*jf_v1));
         J[i][2] += (af_v2*dv_v2 + (af_v0*dv_v0 + af_v1*dv_v1)) - (dr_v2*jf_v2 + (dr_v0*jf_v0 + dr_v1*jf_v1));
      };
      ;
   };
   return 0;
};